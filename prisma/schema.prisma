generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.String
  access_token     String? @db.String
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.String
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  
  groups          GroupMember[]
  ownedGroups     Group[]      @relation("GroupOwner")

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  read      Boolean  @default(false)

  senderId String @db.ObjectId
  sender   User   @relation("SentMessages", fields: [senderId], references: [id])

  receiverId String? @db.ObjectId
  receiver   User?   @relation("ReceivedMessages", fields: [receiverId], references: [id])

  groupId  String? @db.ObjectId
  group    Group?  @relation(fields: [groupId], references: [id])

  @@map("messages")
}

model Group {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String @db.ObjectId
  owner   User   @relation("GroupOwner", fields: [ownerId], references: [id])

  members  GroupMember[]
  messages Message[]

  @@map("groups")
}

model GroupMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      String   @default("member") // "admin" or "member"
  joinedAt  DateTime @default(now())

  userId    String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id])

  groupId   String @db.ObjectId
  group     Group  @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@map("group_members")
} 